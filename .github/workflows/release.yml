name: Release
on:
  push:
    branches:
    - 'main'
  pull_request:
    paths:
    - '.github/workflows/release.yml'

jobs:
  dist:
    name: Dist
    needs: []
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-windows] #, x86_64-win-gnu, win32-msvc
        include:
        # - build: x86_64-linux
        #   os: ubuntu-latest
        #   rust: stable
        #   target: x86_64-unknown-linux-gnu
        #   cross: false
        # - build: aarch64-linux
        #   os: ubuntu-latest
        #   rust: stable
        #   target: aarch64-unknown-linux-gnu
        #   cross: true
        # - build: riscv64-linux
        #   os: ubuntu-latest
        #   rust: stable
        #   target: riscv64gc-unknown-linux-gnu
        #   cross: true
        # - build: x86_64-macos
        #   os: macos-latest
        #   rust: stable
        #   target: x86_64-apple-darwin
        #   cross: false
        - build: x86_64-windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false
          skip_tests: true  # x86_64 
        # 23.03: build issues
        # - build: aarch64-macos
        #   os: macos-latest
        #   rust: stable
        #   target: aarch64-apple-darwin
        #   cross: false
        #   skip_tests: true  # x86_64 host can't run aarch64 code
        # - build: x86_64-win-gnu
        #   os: windows-2019
        #   rust: stable-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: stable
        #   target: i686-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      # Install a pre-release version of Cross
      - name: Install Cross
        if: "matrix.cross"
        run: |
          cargo install cross --git https://github.com/cross-rs/cross.git --rev 47df5c76e7cba682823a0b6aa6d95c17b31ba63a
          echo "CARGO=cross" >> $GITHUB_ENV
        # echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        # echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"

      - name: Run cargo test
        if: "!matrix.skip_tests"
        run: ${{ env.CARGO }} test --release --locked --target ${{ matrix.target }} --workspace

      - name: Set profile.release.strip = true
        shell: bash
        run: |
          cat >> .cargo/config.toml <<EOF
          [profile.release]
          strip = true
          EOF

      - name: Build release binary
        run: ${{ env.CARGO }} build --release --locked --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/felix.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/felix" "dist/"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Build archive
        shell: bash
        run: |
          set -ex

          cd "$(mktemp -d)"
          mv $source/bins-* .
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=felix-$GITHUB_REF_NAME-$platform
              mkdir -p $pkgname
              cp $source/LICENSE $source/README.md $pkgname
              mv bins-$platform/felix$exe $pkgname
              chmod +x $pkgname/felix$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz $pkgname
              else
                  7z a -r dist/$pkgname.zip $pkgname
              fi
          done

          tar cJf dist/felix-$GITHUB_REF_NAME-source.tar.xz -C $source .
          mv dist $source/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: env.preview == 'false'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ github.ref_name }}
          overwrite: true
      
      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        if: env.preview == 'true'
        with:
          name: release
          path: dist/*
